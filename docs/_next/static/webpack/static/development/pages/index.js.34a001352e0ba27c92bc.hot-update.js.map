{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.34a001352e0ba27c92bc.hot-update.js","sources":["webpack:///./components/Workouts.tsx"],"sourcesContent":["import { Container } from 'react-bootstrap'\r\nimport { PieChart, Pie, ResponsiveContainer, Sector } from 'recharts'\r\nimport { Component } from 'react';\r\nimport GraphTitle from './GraphTitle';\r\n\r\ninterface WorkoutsProps {\r\n    data: WorkoutData[]\r\n}\r\n\r\nexport interface WorkoutData {\r\n    'Type': string,\r\n    'Start': string,\r\n    'End': string,\r\n    'Duration': string,\r\n    'Distance': string,\r\n    'Average Heart Rate': string,\r\n    'Max Heart Rate': string,\r\n    'Average Pace': string,\r\n    'Average Speed': string,\r\n    'Active Energy': string,\r\n    'Total Energy': string,\r\n    'Elevation Ascended': string,\r\n    'Elevation Descended': string,\r\n    'Weather Temperature': string,\r\n    'Weather Humidity': string\r\n}\r\n\r\ninterface WorkoutState {\r\n    activeIndex: number;\r\n}\r\n\r\nclass Workouts extends Component<WorkoutsProps, WorkoutState> {\r\n    constructor(props: WorkoutsProps) {\r\n        super(props);\r\n        this.state = {\r\n            activeIndex: 0\r\n        }\r\n    }\r\n\r\n    onPieEnter = (data, index) => {\r\n        this.setState({ activeIndex: index });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <PieChart>\r\n                        <Pie\r\n                            data={this.extractWorkoutTypes()}\r\n                            nameKey=\"name\"\r\n                            dataKey=\"value\"\r\n                            activeIndex={this.state.activeIndex}\r\n                            activeShape={renderActiveShape}\r\n                            innerRadius={60}\r\n                            outerRadius={80}\r\n                            fill=\"#52f04d\"\r\n                            onMouseEnter={this.onPieEnter}\r\n                            paddingAngle={2}\r\n                        >\r\n                        </Pie>\r\n                    </PieChart>\r\n                </ResponsiveContainer>\r\n            </Container>\r\n\r\n        )\r\n    }\r\n\r\n    extractWorkoutTypes() {\r\n        const { data } = this.props;\r\n        let counts = {};\r\n        const types = data.map(datum => { return datum[\"Type\"] });\r\n        for (var i = 0; i < types.length; i++) {\r\n            var num = types[i];\r\n            counts[num] = (counts[num] || 0) + 1\r\n        }\r\n        const uniqueTypes = types.filter((v, i, self) => { return self.indexOf(v) === i })\r\n        const result = uniqueTypes.filter(it => {return it}).map(type => {\r\n            if (counts[type] > 5) {\r\n                return {\r\n                    name: type,\r\n                    value: counts[type]\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nconst renderActiveShape = (props) => {\r\n    const RADIAN = Math.PI / 180;\r\n    const fill = \"#302f2f\";\r\n    const { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle, payload, percent, value } = props;\r\n    const sin = Math.sin(-RADIAN * midAngle);\r\n    const cos = Math.cos(-RADIAN * midAngle);\r\n    const sx = cx + (outerRadius + 10) * cos;\r\n    const sy = cy + (outerRadius + 10) * sin;\r\n    const mx = cx + (outerRadius + 30) * cos;\r\n    const my = cy + (outerRadius + 30) * sin;\r\n    const ex = mx + (cos >= 0 ? 1 : -1) * 22;\r\n    const ey = my;\r\n    const textAnchor = cos >= 0 ? 'start' : 'end';\r\n\r\n    return (\r\n        <g>\r\n            <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>{payload.name.split(\" \").join(\"<tspan></tspan>\")}</text>\r\n            <Sector\r\n                cx={cx}\r\n                cy={cy}\r\n                innerRadius={innerRadius}\r\n                outerRadius={outerRadius}\r\n                startAngle={startAngle}\r\n                endAngle={endAngle}\r\n                fill={fill}\r\n            />\r\n            <Sector\r\n                cx={cx}\r\n                cy={cy}\r\n                startAngle={startAngle}\r\n                endAngle={endAngle}\r\n                innerRadius={outerRadius + 6}\r\n                outerRadius={outerRadius + 10}\r\n                fill=\"#777877\"\r\n            />\r\n            <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill=\"none\" />\r\n            <circle cx={ex} cy={ey} r={2} fill=\"#0cab21\" stroke=\"none\" />\r\n            <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill=\"#000000\">x{value}</text>\r\n            <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill=\"#999\">\r\n                {`${(percent * 100).toFixed(0)}%`}\r\n            </text>\r\n        </g>\r\n    );\r\n};\r\n\r\nexport default Workouts;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AA4BA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AAAA;AAAA;AACA;AACA;AARA;AACA;AADA;AAFA;AAKA;AACA;;;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;;;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;AAvDA;AACA;AA0DA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}